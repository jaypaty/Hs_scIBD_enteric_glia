scIBD <- readRDS("../scIBD_integrated_all/scIBD.gex_matrix.rds")
library(SeuratData)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(reticulate)
library(patchwork)
library(scCustomize)
library(fgsea)
library(enrichR)
# load the libraries
library(ggsignif)
library(ggpubr)
library(plotly)
library(msigdbr)
library(enrichR)
library(clusterProfiler)
library(circlize)
library(ComplexHeatmap)
library(viridis)
library(Nebulosa)
library(cowplot)
library(biomaRt)
library(grid)
# Set minor_cluster as the active identity
# ------------
Idents(scIBD) <- "minor_cluster"
# Add in the UMAP coordinates stored in the metadata as UMAP_1 and UMAP_2
# ------------
scIBD[['umap']] <- CreateDimReducObject(embeddings = as.matrix(scIBD@meta.data[, c('gUMAP_1', 'gUMAP_2')]), key = "UMAP_")
# Assuming the t-SNE coordinates are stored in the metadata as TSNE_1 and TSNE_2
# ------------
scIBD[['tsne']] <- CreateDimReducObject(embeddings = as.matrix(scIBD@meta.data[, c('gTSNE_1', 'gTSNE_2')]), key = "tSNE_")
# Look at the Dim.red. plots of the object
# ------------
p1 <- DimPlot(scIBD, label = TRUE, reduction = "tsne" , label.size = 6.5) + NoLegend()
p1
# Now subset to adult EGC for further analysis
# ------------
scIBD_aEGC <- subset(x = scIBD, idents = "Adult glia")
# The dataset contains samples from a study with label colitis inflamed which will not be analysed due to incomplete metadata. For this, create custom metadata column that excludes Colitis_inflamed as a disease subset
scIBD_aEGC@meta.data$IBD <- scIBD_aEGC@meta.data$disease
scIBD_aEGC@meta.data$IBD[scIBD_aEGC@meta.data$disease == "Colitis_inflamed"] <- NA
scIBD_aEGC_filtered <- scIBD_aEGC[, !is.na(scIBD_aEGC@meta.data$IBD)]
# Lets reset the Idents to the disease levels from the newly defined IBD column to then display Vlnplots
# ------------
scIBD_aEGC_filtered <- SetIdent(scIBD_aEGC_filtered, value = "IBD")
# Now adding mean expression of the Apoptosis genes from Kegg2021Human from MsigDB
# --------
cell_death_combined_Hs <- read.csv(file = "./cell_death_combined_Hs_scIBD.csv")
# Check if the genes are present in the sorted EGC seurat object
# --------
present_genes <- cell_death_combined_Hs[cell_death_combined_Hs %in% rownames(scIBD_aEGC_filtered)]
missing_genes <- cell_death_combined_Hs[!cell_death_combined_Hs %in% rownames(scIBD_aEGC_filtered)]
# Display missing genes if any
# --------
if (length(missing_genes) > 0) {
print(paste("Missing genes:", paste(missing_genes, collapse = ", ")))
}
View(cell_death_combined_Hs)
# Check if the genes are present in the sorted EGC seurat object
# --------
present_genes <- cell_death_combined_Hs[cell_death_combined_Hs$Genes %in% rownames(scIBD_aEGC_filtered)]
# Check if the genes are present in the sorted EGC seurat object
# --------
present_genes <- cell_death_combined_Hs[cell_death_combined_Hs$Genes %in% rownames(scIBD_aEGC_filtered)]
colnames(cell_death_combined_Hs)
cell_death_combined_Hs <- c(cell_death_combined_Hs$Genes)
# Check if the genes are present in the sorted EGC seurat object
# --------
present_genes <- cell_death_combined_Hs[cell_death_combined_Hs %in% rownames(scIBD_aEGC_filtered)]
missing_genes <- cell_death_combined_Hs[!cell_death_combined_Hs %in% rownames(scIBD_aEGC_filtered)]
# Display missing genes if any
# --------
if (length(missing_genes) > 0) {
print(paste("Missing genes:", paste(missing_genes, collapse = ", ")))
}
# Get the expression data for the present genes
# --------
expression_data <- FetchData(scIBD_aEGC_filtered, vars = present_genes)
# Calculate the mean expression for each cell
# --------
mean_expression <- rowMeans(expression_data, na.rm = TRUE)
# Add the mean expression as a new metadata column to the sorted EGC seurat
# --------
scIBD_aEGC_filtered <- AddMetaData(scIBD_aEGC_filtered, metadata = mean_expression, col.name = "mean_cell_death_pathway")
# Verify the new metadata column
# --------
head(scIBD_aEGC_filtered@meta.data)
# Plot Ridgeplots for mean cell death pathway genes on the sorted EGC seurat
RidgePlot(scIBD_aEGC_filtered, features = "mean_cell_death_pathway",
sort = F, cols = c("antiquewhite", "cyan4","firebrick4"), idents = c("Healthy", "UC_non_inflamed", "UC_inflamed"))
# Also a violin plot for the same set of genes can now be plotted
# --------
VlnPlot(scIBD_aEGC_filtered, features = "mean_cell_death_pathway", pt.size = 1.8,
split.by = "IBD", split.plot = F, combine = T, cols = c("cyan4", "antiquewhite", "firebrick4"), idents = c("Healthy", "UC_non_inflamed", "UC_inflamed"), group.by = "IBD")
scIBD_aEGC_filtered_plot <- subset(x = scIBD_aEGC_filtered, idents = c(c("Healthy", "UC_non_inflamed", "UC_inflamed")))
# Also a Feature plot for the same set of genes can now be plotted
# --------
FeaturePlot(scIBD_aEGC_filtered_plot, features = c("mean_cell_death_pathway", "PLP1"), pt.size = 1.8, split.by = "IBD", cols = c("antiquewhite","tomato3"))
# And a Feature plot for the coexpression of mean apoptosis and PLP1
# --------
FeaturePlot(scIBD_aEGC_filtered_plot, label = F, reduction = "umap", features = c("mean_cell_death_pathway", "PLP1"), pt.size = 1.0, blend = TRUE)
FeaturePlot(scIBD_aEGC_filtered_plot, label = F, reduction = "umap", split.by = "study", features = c("mean_cell_death_pathway", "PLP1"), pt.size = 1.0)
DimPlot(scIBD_aEGC_filtered_plot, label = F, group.by = "disease",
cols = c("grey", "#7F0077", "#FF8000" ), pt.size = 1.5)
DimPlot(scIBD_aEGC_filtered_plot, label = F, group.by = "disease", split.by = "study",
cols = c("grey", "#7F0077", "#FF8000" ), pt.size = 1.5)
FeaturePlot(scIBD_aEGC_filtered_plot, label = F, reduction = "umap", features = c("mean_cell_death_pathway", "CXCL9"), pt.size = 1.0, blend = TRUE)
